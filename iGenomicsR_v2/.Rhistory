Vol. 57, No. 1 (1995), pp. 289-300"),
h5("Relationship between P-value, Z-score, and combined score:"),
helpText("The combined score is a combination of the p-value and z-score calculated by multiplying the two scores as follows:
c = ln(p) * z
Where c is the combined score, p is the p-value computed using Fisher's exact test, and z is the z-score computed to assess the deviation from the expected rank. The combined score provides a compromise between both methods and in several benchmarks we show that it reports the best rankings when compared with the other scoring schemes."),
tabsetPanel(
id = 'tabset',
tabPanel("GO_Biological_Process_2017b",
DT::dataTableOutput("mytable_Enrichr_1")),
tabPanel("GO_Molecular_Function_2017b",
DT::dataTableOutput("mytable_Enrichr_2")),
tabPanel("GO_Cellular_Component_2017b",
DT::dataTableOutput("mytable_Enrichr_3")),
tabPanel("Jensen_DISEASES",
DT::dataTableOutput("mytable_Enrichr_4")),
tabPanel("Reactome_2016",
DT::dataTableOutput("mytable_Enrichr_5")),
tabPanel("KEGG_2016",
DT::dataTableOutput("mytable_Enrichr_6")),
tabPanel("Transcription_Factor_PPIs",
DT::dataTableOutput("mytable_Enrichr_7")),
tabPanel("TargetScan_microRNA_2017",
DT::dataTableOutput("mytable_Enrichr_8"))
)
),
tabPanel("Target Gene Symbols",
h5("The target gene symbols allow users to copy and use in other GO analysis website."),
textAreaInput("textareainput_GOEA", "Gene Symbols", value = "", width = '300px', height = '400px', placeholder = NULL)
)
)
)
)
)  #, style='width: 80%'
),
navbarMenu(
"More",
tabPanel("Developer",
h4("Author Information"),
helpText("Indiana University School of Medicine"),
h4("Publication"),
helpText("Please cite ...")
)
)
)
cat(readLines("test2.txt"), sep = "\n")
cat("\n1\n2 5\n3 8\n", file="test2.txt")
cat(readLines("test2.txt"), sep = "\n")
cat(readLines("test2.txt"), sep = "\n")
read.table("test2.txt", header = TRUE)
read.table("test2.txt", header = F)
read.table("test2.txt", header = TRUE, fill = TRUE)
read.table("test2.txt", header = TRUE, fill = F)
cat(readLines("test2.txt"), sep = "\n")
data = cat(readLines("test2.txt"), sep = "\n")
data2 <- lapply(geneCharVector, function(v) { c(v, rep(NA, max.length-length(v)))})
as.matrix(data)
data = cat(readLines("test2.txt"), sep = "\n")
data = as.matrix(cat(readLines("test2.txt"), sep = "\n"))
data = as.matrix(readLines("test2.txt"), sep = "\n")
data
cat("1\n2 5\n3 8\n", file="test2.txt")
data = as.matrix(readLines("test2.txt"), sep = "\n")
data
cat("1\n2\t5\n3\t8\n", file="test2.txt")
data = as.matrix(readLines("test2.txt"), sep = "\n")
data
strsplit(data, split='\t')
data2 <- lapply(data, function(v) { c(v, rep(NA, max.length-length(v)))})
max.length <- max(sapply(data, length))
max.length
data[[1]]
data[[2]]
max.length <- max(sapply(data2, length))
max.length <- max(sapply(data2, length))
max.length <- max(sapply(data2, length))
data2
strsplit(data, split='\t')
data = strsplit(data, split='\t')
max.length <- max(sapply(data, length))
max.length
data2 <- lapply(data, function(v) { c(v, rep(NA, max.length-length(v)))})
data2
data3 <- data.frame(do.call(rbind, data2))
data3
data[is.na(tmpExp)] <- 0
data[is.na(data)] <- 0
data
data3[is.na(data3)] <- 0
is.na(data3)
data[is.na(data)]
data3[is.na(data3)] <- 0
data3 = data.matrix(data3)
data3
data3[is.na(data3)] <- 0
data3
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
head(data)
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
load("/Users/zhi/Desktop/RNA.Rdata")
head(RNA)
quantile(RNA, 10)
# convert na to 0
RNA[is.na(RNA)] <- 0
quantile(RNA, 10)
quantile(RNA, 0.01)
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
load("/Users/zhi/Desktop/fname.Rdata")
fname
gsub("\"","",fname)
runApp('Desktop/GeneCoexpression/RGUI_v5')
fname
fname <- gsub("\"","",fname) # convert "\"1553418_a_at\"" to "1553418_a_at"
fname
t <- try(gpl <- getGEO("GPL570"))
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
for (i in 50000:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
print(i)
}
length(fname)
fname(54675)
fname[54675]
fname[54674]
fname[54676]
fname[54677]
fname[54678]
fname[54679]
fname[154679]
RNA
RNA[54675,]
RNA[54676,]
RNA[54677,]
fname[54676]
runApp('Desktop/GeneCoexpression/RGUI_v5')
# data <<- read.csv(input$csvfile$datapath,
#                   header = input$header,
#                   sep = input$sep,
#                   quote = input$quote)
data_temp = as.matrix(readLines("/Users/zhi/Desktop/GSE17537.txt"), sep = '\n')
data_temp = strsplit(data_temp, split=input$sep)
data_temp = strsplit(data_temp, split="\t")
max.length <- max(sapply(data_temp, length))
data_temp <- lapply(data_temp, function(v) { c(v, rep(NA, max.length-length(v)))})
data_temp <- data.frame(do.call(rbind, data_temp))
dim(data_temp)
data_temp[54752]
data_temp[54752,]
data_temp[dim(data_temp)[1],1]
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
}
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp[-dim(data_temp)[1]]
}
# data <<- read.csv(input$csvfile$datapath,
#                   header = input$header,
#                   sep = input$sep,
#                   quote = input$quote)
data_temp = as.matrix(readLines("/Users/zhi/Desktop/GSE17537.txt"), sep = '\n')
data_temp = strsplit(data_temp, split="\t")
max.length <- max(sapply(data_temp, length))
data_temp <- lapply(data_temp, function(v) { c(v, rep(NA, max.length-length(v)))})
data_temp <- data.frame(do.call(rbind, data_temp))
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp[-dim(data_temp)[1],]
}
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp = data_temp[-dim(data_temp)[1],]
}
dim(data_temp)
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
load("/Users/zhi/Desktop/fname.Rdata")
length(fname)
gpltable
gpltable$`Gene Symbol`
if (!is.null(gpltable$`Gene Symbol`)){
print("load GPL table with name \"Gene Symbol\"")
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
}
print(length(fname2))
print(dim(data))
print(length(fname))
fname2 <- fname
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
genes_str <- c('PHF|14','RBM|3','Nlrx1','MSL1','PHF21A','ARL10','INSR')
return(paste(genes_str, collapse = '\n'))
paste(genes_str, collapse = '\n')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
ological_Process_2017b",
"GO_Molecular_Function_2017b",
"GO_Cellular_Component_2017b",
"Jensen_DISEASES",
"Reactome_2016",
"KEGG_2016",
"Transcription_Factor_PPIs",
"TargetScan_microRNA_2017")
enrichr_dbs <- c("GO_Biological_Process_2017b",
"GO_Molecular_Function_2017b",
"GO_Cellular_Component_2017b",
"Jensen_DISEASES",
"Reactome_2016",
"KEGG_2016",
"Transcription_Factor_PPIs",
"TargetScan_microRNA_2017")
paste0(enrichr_dbs, '.csv')
for(i in 1:10){
print(i)
}
for(i in 1:length(enrichr_dbs)){
print(i)
}
for(i in 1:length(enrichr_dbs)){
print(enrichr_dbs[i])#enriched
}
if(separator == ','){
fs <- paste0(enrichr_dbs, '.csv')
}
separator = ','
if(separator == ','){
fs <- paste0(enrichr_dbs, '.csv')
}
fs
for(i in 1:length(enrichr_dbs)){
print(fs[i])#enriched
}
enriched
zip
file.rename
fname = "fname"
if(file.exists(paste0(fname, ".zip"))) {file.rename(paste0(fname, ".zip"), fname)}
file.rename(paste0(fname, ".zip"), fname)
file.exists(paste0(fname, ".zip"))
runApp('Desktop/GeneCoexpression/RGUI_v5')
fs
fs = c(fs, 'genes_list.txt')
fs
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
shiny::runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
dim(finalExp)[1]
dim(iris)[1]
for(i in dim(iris)[1]){print(i)}
185/2
ceil(92.5)
ceiling(0.2)
pchisq
help pchisq
help(pchisq)
help(lmQCM)
a = c("a","b","c")
a
c(a,0)
cbind(a,0)
unlist(cbind(a,0))
as.matrix(cbind(a,0))
a = cbind(a,0)
a
a[1,2]
a[1,2] = 0
a[1,2]
a[1,2] = 0.0002
a
data.frame(a)
a = data.frame(a)
a
a[1,2] = 0.0002
a
a[1,2] = 0.00021224352
a[1,2] = 0.0021224352
a[1,2] = 0.002122435
a = c("a","b","c")
data.frame(cbind(a,0))
a[1,2] = 0.0021224352
a = as.matrix(a)
a
geneCharVector <- matrix(0, ncol = 0, nrow = length(finalSym))
matrix(0, ncol = 0, nrow = 100)
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
library(survival)
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
medianB = c(0,1,0,1,0)
sum(medianB) != length(medianB) || sum(medianB) != 0
sum(medianB) != length(medianB)
sum(medianB) != length(medianB) || sum(medianB) != 0
sum(medianB)
length(medianB)
rand()
randu
randu[1:100]
randu[1,1:100]
randu[1:100,1]
rr = randu[1:100,1]
rr_sorted = sort(rr, decreasing = FALSE, index.return=T)
rr_sorted_list = sort(rr, decreasing = FALSE, index.return=T)
rr_sorted_idx = rr_sorted_list[2]
rr_sorted_idx
rr_sorted_idx = rr_sorted_list$ix
rr_sorted_idx
rr_sorted = rr_sorted_list$x
rr_sorted
rr_sorted_idx = rr_sorted_list$ix
rr_sorted_idx
medianB <- rr_sorted_idx[ rr_sorted_idx < 49 ]
medianB
3
medianB <- rep(0, length(rr))
medianB
medianB[ rr_sorted_idx > 49 ] = 1
medianB
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
load("/Users/zhi/Desktop/finalExp.Rdata")
load("/Users/zhi/Desktop/finalSym.Rdata")
load("/Users/zhi/Desktop/data_final.Rdata")
head(data_final)
colnames(data_final)[1:3] = c("Gene_Symbol", sprintf("P-value of %s",input$choose_OS_EFS), "Expressions")
colnames(data_final)[1:3] = c("Gene_Symbol", sprintf("P-value of %s","OS"), "Expressions")
head(data_final[1:5,1:5])
lengh(data_final[,1])
length(data_final[,1])
length(data_final[,2])
length(data_final[,3])
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
load("/Users/zhi/Desktop/finalSym.Rdata")
load("/Users/zhi/Desktop/data_final.Rdata")
load("/Users/zhi/Desktop/finalExp.Rdata")
dim(finalExp)
dim(finalSym)
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
load("/Users/zhi/Desktop/finalSym.Rdata")
dim(finalSym)
finalSym
length(finalSym)
load("/Users/zhi/Desktop/finalSym2.Rdata")
length(finalSym)
load("/Users/zhi/Desktop/finalExp.Rdata")
cbind(finalSym,finalExp)
data_f = cbind(finalSym,finalExp)
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
load("/Users/zhi/Desktop/data_final.Rdata")
runApp('Desktop/TBI-TSUNAMI/shiny-examples-master/012-datatables')
runApp('Desktop/TBI-TSUNAMI/shiny-examples-master/012-datatables')
"0.391905147272696" <0.05
"0.391905147272696" <0.7
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
load("/Users/zhi/Desktop/finalPValue.Rdata")
finalPValue
finalPValue<=0.05
sum(finalPvalue<0.05)
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
load("/Users/zhi/Desktop/data_temp.Rdata")
data_temp[1:5,1:5]
data_temp[,1:5]
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
load("/Users/zhi/Desktop/data_temp.Rdata")
data_temp
unlist(data_temp)
unlist(data_temp)[1:4,1:4]
unlist(data_temp[1:4,1:4])
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
shiny::runApp('Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
shiny::runApp('Desktop/iGenomicsR/iGenomicsR')
#library("survplot")
library(GGally)
install.packages("GGally")
runApp('Desktop/iGenomicsR/iGenomicsR')
install.packages("cowplot")
runApp('Desktop/iGenomicsR/iGenomicsR')
runApp('Desktop/iGenomicsR/iGenomicsR')
runApp('Desktop/iGenomicsR/iGenomicsR')
shiny::runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
runApp('Desktop/TSUNAMI/RGUI_v8')
# 03/28/2018 Zhi Huang
# Cell Range R Kit https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/rkit
# installation: just one line: source("http://cf.10xgenomics.com/supp/cell-exp/rkit-install-2.0.0.R")
library(cellrangerRkit)
packageVersion("cellrangerRkit")
# main starts
datapath = c("NS_084_Yoder/CB-ECFC", "NS_084_Yoder/iPS-ECFC-2", "NS_085_Yang/KO-6", "NS_085_Yang/WT-5")
for(i in 1:1){
cellranger_pipestance_path <- paste("~/Desktop/SingleCellDataProcessR/Data", datapath[1], sep="/")
gbm <- load_cellranger_matrix(cellranger_pipestance_path)
# could not find /outs/metrics_summary.csv
dim(exprs(gbm)) # expression matrix
dim(fData(gbm)) # data frame of genes
dim(pData(gbm)) # data frame of cell barcodes
}
# analysis_results <- load_cellranger_analysis_results(cellranger_pipestance_path)
#
# # t-SNE
# tsne_proj <- analysis_results$tsne
# visualize_umi_counts(gbm,tsne_proj[c("TSNE.1","TSNE.2")],limits=c(3,4),marker_size=0.05)
expr_full_mat = as.matrix(exprs(gbm))
head(expr_full_mat)
expr_full_mat[1:5,1:5]
expr_full_mat[1:50,1:50]
b = fData(gbm)
# 03/28/2018 Zhi Huang
# Cell Range R Kit https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/rkit
# installation: just one line: source("http://cf.10xgenomics.com/supp/cell-exp/rkit-install-2.0.0.R")
library(cellrangerRkit)
packageVersion("cellrangerRkit")
workdir = "~/Desktop/SingleCellDataProcessR/Data/"
# main starts
datapath = c("NS_084_Yoder/CB-ECFC", "NS_084_Yoder/iPS-ECFC-2", "NS_085_Yang/KO-6", "NS_085_Yang/WT-5")
for(i in 1:4){
cellranger_pipestance_path <- paste(workdir, datapath[i], sep="")
gbm <- load_cellranger_matrix(cellranger_pipestance_path)
# could not find /outs/metrics_summary.csv
dim(exprs(gbm)) # expression matrix
dim(fData(gbm)) # data frame of genes
dim(pData(gbm)) # data frame of cell barcodes
expr_full_mat = as.matrix(exprs(gbm))
write.table(expr_full_mat, file = paste(workdir, datapath[i],"_expr.csv", sep=""),row.names=T, na="",col.names=T, sep=",")
write.table(fData(gbm), file = paste(workdir, datapath[i],"_genes.csv", sep=""),row.names=T, na="",col.names=T, sep=",")
write.table(pData(gbm), file = paste(workdir, datapath[i],"_barcodes.csv", sep=""),row.names=T, na="",col.names=T, sep=",")
}
# analysis_results <- load_cellranger_analysis_results(cellranger_pipestance_path)
#
# # t-SNE
# tsne_proj <- analysis_results$tsne
# visualize_umi_counts(gbm,tsne_proj[c("TSNE.1","TSNE.2")],limits=c(3,4),marker_size=0.05)
head(expr_full_mat)
dim(expr_full_mat)
colnames(expr_full_mat)[1]
colnames(expr_full_mat)[2464]
colnames(expr_full_mat)[2465]
colnames(expr_full_mat)[2466]
colnames(expr_full_mat)[1]
colnames(expr_full_mat)[2]
expr_full_mat[1:4,1:3]
# 03/28/2018 Zhi Huang
# Cell Range R Kit https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/rkit
# installation: just one line: source("http://cf.10xgenomics.com/supp/cell-exp/rkit-install-2.0.0.R")
library(cellrangerRkit)
packageVersion("cellrangerRkit")
workdir = "~/Desktop/SingleCellDataProcessR/Data/"
# main starts
datapath = c("NS_084_Yoder/CB-ECFC", "NS_084_Yoder/iPS-ECFC-2", "NS_085_Yang/KO-6", "NS_085_Yang/WT-5")
for(i in 1:4){
cellranger_pipestance_path <- paste(workdir, datapath[i], sep="")
gbm <- load_cellranger_matrix(cellranger_pipestance_path)
# could not find /outs/metrics_summary.csv
dim(exprs(gbm)) # expression matrix
dim(fData(gbm)) # data frame of genes
dim(pData(gbm)) # data frame of cell barcodes
expr_full_mat = as.matrix(exprs(gbm))
write.table(expr_full_mat, file = paste(workdir, datapath[i],"_expr.csv", sep=""),row.names=T, na="",col.names=NA, sep=",")
write.table(fData(gbm), file = paste(workdir, datapath[i],"_genes.csv", sep=""),row.names=T, na="",col.names=NA, sep=",")
write.table(pData(gbm), file = paste(workdir, datapath[i],"_barcodes.csv", sep=""),row.names=T, na="",col.names=NA, sep=",")
}
# analysis_results <- load_cellranger_analysis_results(cellranger_pipestance_path)
#
# # t-SNE
# tsne_proj <- analysis_results$tsne
# visualize_umi_counts(gbm,tsne_proj[c("TSNE.1","TSNE.2")],limits=c(3,4),marker_size=0.05)
shiny::runApp('Desktop/iGenomicsR/iGenomicsR')
