theme_bw() + my_theme + theme(axis.text.y=element_blank()) +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "blue" , high = "red", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme + theme(axis.text.y=element_blank()) +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "white" , high = "red", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme + theme(axis.text.y=element_blank()) +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "green" , high = "red", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme + theme(axis.text.y=element_blank()) +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "red" , high = "yellow", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme + theme(axis.text.y=element_blank()) +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient(low = "white" , high = "red4", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "red4" , high = "yellow", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme + theme(axis.text.y=element_blank()) +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = "red" , high = "yellow", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme + theme(axis.text.y=element_blank()) +
labs(x="", y="")
shiny::runApp('D:/InteClinGenomics')
rna_criteria <- "maxExp > 0.5 and var > 0.9"
rna_genes <- rownames(DB[["RNA"]])
maxExp_filters <- rna_criteria[grep("maxExp", rna_criteria)]
if(length(maxExp_filters)>0){
temp_res <- gene_filter(DB[["RNA"]][rna_genes,rna_samples], "maxExp", parse_criteria(maxExp_filters))
rna_genes <- temp_res[["genes"]]
print(temp_res[["cutoff"]])
}
maxExp_filters
rna_criteria <- c("maxExp > 0.5", "var > 0.9")
maxExp_filters <- rna_criteria[grep("maxExp", rna_criteria)]
maxExp_filters
if(length(maxExp_filters)>0){
temp_res <- gene_filter(DB[["RNA"]][rna_genes,rna_samples], "maxExp", parse_criteria(maxExp_filters))
rna_genes <- temp_res[["genes"]]
print(temp_res[["cutoff"]])
}
rna_samples <- colnames(DB[["RNA"]])[!apply(DB[["RNA"]], 2, function(x){all(is.na(x))})]
rna_genes <- rownames(DB[["RNA"]])
maxExp_filters <- rna_criteria[grep("maxExp", rna_criteria)]
if(length(maxExp_filters)>0){
temp_res <- gene_filter(DB[["RNA"]][rna_genes,rna_samples], "maxExp", parse_criteria(maxExp_filters))
rna_genes <- temp_res[["genes"]]
print(temp_res[["cutoff"]])
}
var_filters <- rna_criteria[grep("var", rna_criteria)]
var_filters
if(length(var_filters)>0){
temp_res <- gene_filter(DB[["RNA"]][rna_genes,rna_samples], "var", parse_criteria(var_filters))
rna_genes <- temp_res[["genes"]]
print(temp_res[["cutoff"]])
}
length(rna_genes)
rna_genes <- rownames(DB[["RNA"]])
maxExp_filters <- rna_criteria[grep("maxExp", rna_criteria)]
if(length(maxExp_filters)>0){
temp_res <- gene_filter(DB[["RNA"]][rna_genes,rna_samples], "maxExp", parse_criteria(maxExp_filters))
rna_genes <- temp_res[["genes"]]
print(temp_res[["cutoff"]])
}
var_filters <- rna_criteria[grep("var", rna_criteria)]
parse_criteria(var_filters)
dim(rna_genes)
length(rna_genes)
rna_genes <- rownames(DB[["RNA"]])
maxExp_filters <- rna_criteria[grep("maxExp", rna_criteria)]
if(length(maxExp_filters)>0){
temp_res <- gene_filter(DB[["RNA"]][rna_genes,rna_samples], "maxExp", parse_criteria(maxExp_filters))
}
length(rna_genes)
length(temp_res[["genes"]])
temp_res <- gene_filter(DB[["RNA"]][rna_genes,rna_samples], "maxExp", parse_criteria(maxExp_filters))
length(temp_res[["genes"]])
dim(exp_table[maxexp_vector > quantile_rm_na(maxexp_vector, probs=cutoff[1]) & maxexp_vector < quantile_rm_na(maxexp_vector, probs=cutoff[1]), ])
exp_table <- DB[["RNA"]][rna_genes,rna_samples]
dim(exp_table[maxexp_vector > quantile_rm_na(maxexp_vector, probs=cutoff[1]) & maxexp_vector < quantile_rm_na(maxexp_vector, probs=cutoff[1]), ])
maxexp_vector <- c(0.9, 1)
paste("maxexp cutoff:", quantile_rm_na(maxexp_vector, probs=cutoff))
maxexp_vector <- apply(exp_table, 1, max)
cutoff <- c(0.9,1)
paste("maxexp cutoff:", quantile_rm_na(maxexp_vector, probs=cutoff))
dim(exp_table[maxexp_vector > quantile_rm_na(maxexp_vector, probs=cutoff[1]) & maxexp_vector < quantile_rm_na(maxexp_vector, probs=cutoff[1]), ])
shiny::runApp('D:/InteClinGenomics')
source('D:/InteClinGenomics/do_prepare_data.R')
head(setdiff(rownames(DB[["RNA"]]), "---"))
DB[["RNA"]] <- DB[["RNA"]][setdiff(rownames(DB[["RNA"]]), "---", "", "--- "),]
DB[["RNA"]] <- DB[["RNA"]][setdiff(rownames(DB[["RNA"]]), c("---", "", "--- ")),]
source('D:/InteClinGenomics/do_prepare_data.R')
shiny::runApp('D:/InteClinGenomics')
source('D:/InteClinGenomics/do_prepare_data.R')
shiny::runApp('D:/InteClinGenomics')
rna[1:5, 1:5]
rna <- t(apply(DB[["RNA"]][rna_genes,selected_samples], 1, scale))
head(rna_genes)
rna <- t(apply(DB[["RNA"]][1:5,selected_samples], 1, scale))
rna_genes <- rownames(DB[["RNA"]], n=5)
rna_genes <- head(rownames(DB[["RNA"]]), n=5)
rna <- t(apply(DB[["RNA"]][rna_genes,selected_samples], 1, scale))
colnames(rna) <- selected_samples
rna <- melt(rna)
rna[["Var2"]] <- factor(rna[["Var2"]], levels=ordered_samples, ordered = TRUE)
rna[["Var1"]] <- factor(rna[["Var1"]], levels=rna_genes, ordered = TRUE)
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient(low = "white" , high = "red", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient(low = "blue" , high = "red", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient(low = "white" , high = "red", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme +
labs(x="", y="")
?scale_fill_gradient
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient(low = "blue" , mid="white", high = "red", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient2(low = "blue" , mid="white", high = "red", breaks=seq(-2,2,0.2)) +
theme_bw() + my_theme +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient2(low = "blue" , mid="white", high = "red", breaks=seq(-2,2,0.1)) +
theme_bw() + my_theme +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=seq(-2,2,0.1)) +
theme_bw() + my_theme +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=seq(-1,1,0.1)) +
theme_bw() + my_theme +
labs(x="", y="")
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=seq(-2,2,0.1)) +
theme_bw() + my_theme +
labs(x="", y="")
shiny::runApp('D:/InteClinGenomics')
source('D:/InteClinGenomics/do_prepare_data.R')
shiny::runApp('D:/InteClinGenomics')
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=c(-Inf, seq(-2,2,0.1)), Inf) +
theme_bw() + my_theme + labs(x="", y="")
shiny::runApp('D:/InteClinGenomics')
rna[["value"]][ rna[["value"]] > 2] <- 2
rna[["value"]][ rna[["value"]] < -2] <- -2
ggplot(rna,  aes(Var2, Var1)) +
geom_tile(aes(fill = value),  colour = "white") +
scale_fill_gradient2(low = "blue4" , mid="white", high = "red", breaks=seq(-2,2,0.1)) +
theme_bw() + my_theme + labs(x="", y="")
shiny::runApp('D:/InteClinGenomics')
hclust_tree <- hclust(as.dist(1-cor(t(DB[["RNA"]][rna_genes,ordered_samples]))))
cutree(hclust_tree, k=2)
hclust_tree <- hclust(as.dist(1-cor(DB[["RNA"]][rna_genes,ordered_samples])))
cutree(hclust_tree, k=2)
data2download <- data.frame(patient_id=ordered_samples)
hclust_tree <- hclust(as.dist(1-cor(DB[["RNA"]][rna_genes,ordered_samples])))
for(i in 2:8){
data2download[[paste("K", i, sep="")]] <- cutree(hclust_tree, k=i)
}
head(data2download)
shiny::runApp('D:/InteClinGenomics')
hclust_tree <- hclust(as.dist(1-cor(DB[["RNA"]][rna_genes,ordered_samples])))
d <- list()
for(i in 2:8){
d[[paste("K", i, sep="")]] <- cutree(hclust_tree, k=i)
}
head(d)
d <- as.data.frame(d)
head(d)
head(melt(d))
d <- melt(d)
d <- data.frame(patient_id=ordered_samples)
for(i in 2:8){
d[[paste("G", i, sep="")]] <- cutree(hclust_tree, k=i)
}
d <- melt(d)
head(d)
ggplot(d, aes(patient_id, variable)) +
geom_tile(aes(fill = value), colour = "white") +
theme_bw() + my_theme +
labs(x="", y="")
d[["value"]] <- as.factor(d[["value"]])
ggplot(d, aes(patient_id, variable)) +
geom_tile(aes(fill = value), colour = "white") +
theme_bw() + my_theme +
labs(x="", y="")
shiny::runApp('D:/InteClinGenomics')
shiny::runApp('D:/InteClinGenomics')
source('D:/InteClinGenomics/my_heatmap.R')
divide_patients_by_rna(rna_genes, ordered_samples)
shiny::runApp('D:/InteClinGenomics')
library(ggdendro)
install.packages(ggdendro)
install.packages("D:/InteClinGenomics/ggdendro_0.1-18.tar.gz")
library(ggdendro)
dendro_data(hclust_tree, type="rectangle")
dendr <- dendro_data(hclust_tree, type="rectangle")
ggplot() +
geom_segment(data=segment(dendr), aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=label(dendr), aes(x=x, y=y, label=label, hjust=0), size=3) + my_theme()
ggplot() +
geom_segment(data=segment(dendr), aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=label(dendr), aes(x=x, y=y, label=label, hjust=0), size=3)
shiny::runApp('D:/InteClinGenomics')
dendr[["x"]]
dendr
head(segment(dendr))
dim(segment(dendr))
plot(sample_hc)
shiny::runApp('D:/InteClinGenomics')
shiny::runApp('D:/InteClinGenomics')
hclust_tree
cutree(hclust_tree, k=i)
d <- list()
for(i in 2:8){
d[[paste("G", i, sep="")]] <- cutree(hclust_tree, k=i)
}
d <- as.data.frame(d)
d
shiny::runApp('D:/InteClinGenomics')
shiny::runApp('D:/InteClinGenomics')
load("D:/InteClinGenomics/my.RData")
shiny::runApp('D:/InteClinGenomics')
shiny::runApp('D:/InteClinGenomics')
names(DB)
shiny::runApp('D:/InteClinGenomics')
shiny::runApp('D:/InteClinGenomics')
shiny::runApp('D:/InteClinGenomics')
?sub
shiny::runApp('D:/InteClinGenomics')
shiny::runApp('D:/InteClinGenomics')
source('D:/InteClinGenomics/my_heatmap.R')
my_heatmap_protein(0, c("PTEN", "TP53"), "PTEN", "BMI", protein_genes="PTEN")
mode <- 0
mutation_genes <- c("PTEN", "TP53")
rna_genes <- "PTEN"
clinical_lab <- "BMI"
protein_genes <- "PTEN"
protein_samples <- colnames(DB[["Protein"]])[!apply(DB[["Protein"]], 2, function(x){all(is.na(x))})]
print(length(protein_samples))
if(mode==0){
my_heatmap_mutation(mutation_genes=mutation_genes, protein_genes=protein_genes,
rna_genes=rna_genes, clinical_lab=clinical_lab,
order_by="protein", selected_samples = protein_samples)
} else {
protein_genes <- rownames(DB[["Protein"]])
maxExp_filters <- protein_criteria[grep("maxExp", protein_criteria)]
if(length(maxExp_filters)>0){
temp_res <- gene_filter(DB[["Protein"]][protein_genes,protein_samples], "maxExp", parse_criteria(maxExp_filters))
protein_genes <- temp_res[["genes"]]
print(temp_res[["cutoff"]])
}
var_filters <- protein_criteria[grep("var", protein_criteria)]
if(length(var_filters)>0){
temp_res <- gene_filter(DB[["Protein"]][protein_genes,protein_samples], "var", parse_criteria(var_filters))
protein_genes <- temp_res[["genes"]]
print(temp_res[["cutoff"]])
}
if(length(cv_filters)>0){
temp_res <- gene_filter(DB[["Protein"]][protein_genes,protein_samples], "cv", parse_criteria(cv_filters))
protein_genes <- temp_res[["genes"]]
print(temp_res[["cutoff"]])
cv_filters <- protein_criteria[grep("cv", protein_criteria)]
}
protein_genes <- sub("_epi", "", protein_genes)
protein_genes <- unique(sub("_strom", "", protein_genes))
my_heatmap_mutation(mutation_genes=mutation_genes, rna_genes=rna_genes,
protein_genes=protein_genes, clinical_lab=clinical_lab,
order_by="protein", selected_samples = protein_samples)
}
my_heatmap_mutation(mutation_genes=mutation_genes, protein_genes=protein_genes,
rna_genes=rna_genes, clinical_lab=clinical_lab,
order_by="protein", selected_samples = protein_samples)
protein_genes
sample_order_res <- fun_order_samples(mutation_genes, rna_genes, protein_genes, clinical_lab, order_by, selected_samples)
order_by="protein"
sample_order_res <- fun_order_samples(mutation_genes, rna_genes, protein_genes, clinical_lab, order_by, selected_samples)
selected_samples=protein_samples
sample_order_res <- fun_order_samples(mutation_genes, rna_genes, protein_genes, clinical_lab, order_by, selected_samples)
res <- list()
protein_genes <- c(paste(protein_genes, "_Epi", sep=""), paste(protein_genes, "_Strom", sep=""))
protein_genes
res[["hc"]] <- hclust(as.dist(1-cor(DB[["Protein"]][protein_genes,selected_samples])), method="average")
DB[["Protein"]][protein_genes,selected_samples])
cor(DB[["Protein"]][protein_genes,selected_samples])
hclust(as.dist(1-cor(DB[["Protein"]][protein_genes,selected_samples])), method="average")
cor(DB[["Protein"]]
)
DB[["Protein"]]
shiny::runApp('D:/InteClinGenomics')
protein_samples <- colnames(DB[["Protein"]])[!apply(DB[["Protein"]], 2, function(x){any(is.na(x))})]
protein_genes
hclust(as.dist(1-cor(DB[["Protein"]][protein_genes,protein_samples])), method="average")
DB[["Protein"]][protein_genes,protein_samples]
?cor
gene_cor <- cor(DB[["Protein"]][protein_genes,selected_samples])
gene_cor <- apply(gene_cor, c(1,2), function(x){if(is.na(x)){1} else {x}})
gene_cor
gene_cor <- cor(DB[["Protein"]][protein_genes,selected_samples])
gene_cor
gene_cor <- apply(gene_cor, c(1,2), function(x){if(is.na(x)){1} else {x}})
res[["hc"]] <- hclust(as.dist(1-gene_cor), method="average")
sample_order <- res[["hc"]]$order
plot(res[["hc"]])
shiny::runApp('D:/InteClinGenomics')
res
names(res)
res[["xx\"]]
""
"
res[["xx"]]
shiny::runApp('D:/InteClinGenomics')
options(stringsAsFactors = FALSE)
DB <- list()
mutation_table <- read.table("D:/projects/Endometrial carcinoma/20160403/all_tumorOnly.table", header=TRUE, sep="\t")
genes <- mutation_table[,"Gene"]
GT <- mutation_table[,grep("_GT", colnames(mutation_table))]
DB[["Mutation_gene"]] <- apply(GT, 2, function(x){
tapply(x, genes, function(z){any(z!="")})
})
load("D:/InteClinGenomics/my.RData")
test_res <- list()
all_genes <- rownames(DB[["Mutation_gene"]])
for(i in 1:length(all_genes)){
for(j in (i+1):length(all_genes)){
ni <- sum(as.numeric(DB[["Mutation_gene"]][i,]), na.rm=TRUE)
nj <- sum(as.numeric(DB[["Mutation_gene"]][j,]), na.rm=TRUE)
if( ni >= 5 & nj >= 5){
temp <- fisher.test(DB[["Mutation_gene"]][i,], DB[["Mutation_gene"]][j,])
if(temp$p.value < 0.05){
test_res[[paste(i,j)]] <- c(all_genes[i], all_genes[j], ni, nj,temp$p.value)
}
}
}
}
sum(apply(DB[["Mutation_gene"]], 1, sum) > 5)
sum(apply(DB[["Mutation_gene"]], 1, sum, rm.na=TRUE) > 5)
DB[["Mutation_gene"]][1:5, 1:3]
sum(apply(DB[["Mutation_gene"]], 1, sum, na.rm=TRUE) > 5)
test_res <- list()
all_genes <- rownames(DB[["Mutation_gene"]])
for(i in 1:length(all_genes)){
for(j in (i+1):length(all_genes)){
ni <- sum(as.numeric(DB[["Mutation_gene"]][i,]), na.rm=TRUE)
nj <- sum(as.numeric(DB[["Mutation_gene"]][j,]), na.rm=TRUE)
if( ni >= 5 & nj >= 5){
temp <- fisher.test(DB[["Mutation_gene"]][i,], DB[["Mutation_gene"]][j,])
test_res[[paste(i,j)]] <- c(all_genes[i], all_genes[j], ni, nj,temp$p.value)
}
}
}
j
test_res <- t(as.data.frame(test_res))
head(test_res)
colnames(test_res) <- c("Gene1", "Gene2", "nAltPatGene1", "nAltPatGene2", "pvalue")
test_res[["adj_pvalue"]] <- p.adjust(test_res[,"pvalue"], method="BH")
test_res[["adj_pvalue"]] <- p.adjust(test_res[,"pvalue",drop=TRUE], method="BH")
test_res <- as.data.frame(test_res)
test_res[["adj_pvalue"]] <- p.adjust(test_res[,"pvalue",drop=TRUE], method="BH")
test_res <- test_res[order(test_res[,"pvalue"]),]
dim(subset(test_res, adj_pvalue < 0.05))
head(subset(test_res, adj_pvalue < 0.05))
tail(subset(test_res, adj_pvalue < 0.05))
test_res[["adj_pvalue"]] <- p.adjust(test_res[,"pvalue",drop=TRUE], method="BH")
test_res <- test_res[order(as.numeric(test_res[,"pvalue"])),]
head(subset(test_res, adj_pvalue < 0.05))
tail(subset(test_res, adj_pvalue < 0.05))
dim(subset(test_res, adj_pvalue < 0.05))
DB[["mutation_gene_test"]] <- subset(test_res, adj_pvalue < 0.05)
source('D:/InteClinGenomics/do_prepare_data.R')
ni <- sum(as.numeric(DB[["Mutation_gene"]][i,]), na.rm=TRUE)
nj <- sum(as.numeric(DB[["Mutation_gene"]][j,]), na.rm=TRUE)
nij <- sum(as.numeric(DB[["Mutation_gene"]][i,]) == 1 & as.numeric(DB[["Mutation_gene"]][j,]) == 1, na.rm=TRUE)
ni
nj
nij
test_res <- list()
all_genes <- rownames(DB[["Mutation_gene"]])
for(i in 1:(length(all_genes)-1)){
for(j in (i+1):length(all_genes)){
ni <- sum(as.numeric(DB[["Mutation_gene"]][i,]), na.rm=TRUE)
nj <- sum(as.numeric(DB[["Mutation_gene"]][j,]), na.rm=TRUE)
nij <- sum(as.numeric(DB[["Mutation_gene"]][i,]) == 1 & as.numeric(DB[["Mutation_gene"]][j,]) == 1, na.rm=TRUE)
if( ni >= 5 & nj >= 5){
temp <- fisher.test(DB[["Mutation_gene"]][i,], DB[["Mutation_gene"]][j,])
test_res[[paste(i,j)]] <- c(all_genes[i], all_genes[j], ni, nj, nij, temp$p.value)
}
}
}
test_res <- t(as.data.frame(test_res))
colnames(test_res) <- c("Gene1", "Gene2", "nAltPatGene1", "nAltPatGene2", "nSharedAltPat", "pvalue")
test_res <- as.data.frame(test_res)
test_res[["adj_pvalue"]] <- p.adjust(test_res[,"pvalue",drop=TRUE], method="BH")
test_res <- test_res[order(as.numeric(test_res[,"pvalue"])),]
DB[["mutation_gene_test"]] <- subset(test_res, adj_pvalue < 0.05)
save(DB, file="D:/InteClinGenomics/my.RData")
head(DB[["mutation_gene_test"]])
shiny::runApp('D:/InteClinGenomics')
temp
?fisher.test
temp$estimate
test_res <- list()
all_genes <- rownames(DB[["Mutation_gene"]])
for(i in 1:(length(all_genes)-1)){
for(j in (i+1):length(all_genes)){
ni <- sum(as.numeric(DB[["Mutation_gene"]][i,]), na.rm=TRUE)
nj <- sum(as.numeric(DB[["Mutation_gene"]][j,]), na.rm=TRUE)
nij <- sum(as.numeric(DB[["Mutation_gene"]][i,]) == 1 & as.numeric(DB[["Mutation_gene"]][j,]) == 1, na.rm=TRUE)
if( ni >= 5 & nj >= 5){
temp <- fisher.test(DB[["Mutation_gene"]][i,], DB[["Mutation_gene"]][j,])
test_res[[paste(i,j)]] <- c(all_genes[i], all_genes[j], ni, nj, nij, temp$estimate, temp$p.value)
}
}
}
test_res <- t(as.data.frame(test_res))
colnames(test_res) <- c("Gene1", "Gene2", "nAltPatGene1", "nAltPatGene2", "nSharedAltPat", "oddsRatio", "pvalue")
test_res <- as.data.frame(test_res)
test_res[["adj_pvalue"]] <- p.adjust(test_res[,"pvalue",drop=TRUE], method="BH")
test_res <- test_res[order(as.numeric(test_res[,"pvalue"])),]
DB[["mutation_gene_test"]] <- subset(test_res, adj_pvalue < 0.05)
head(DB[["mutation_gene_test"]])
save(DB, file="D:/InteClinGenomics/my.RData")
shiny::runApp('D:/InteClinGenomics')
?tableOutput
shiny::runApp('D:/InteClinGenomics')
?format
format(1.23234, nsmall=2)
format(1.23234, nsmall=2, digits=2)
format(22321.232343453, nsmall=2, digits=2)
format(22321.232343453, digits=2)
format(22321.232343453, nsmall=2, digits=2, scientific=TRUE)
format(22321.232343453, digits=2, scientific=TRUE)
shiny::runApp('D:/InteClinGenomics')
format(5.47628448358068e-22,scientific=TRUE, nsmall=2,digits=2)
shiny::runApp('D:/InteClinGenomics')
install.packages("devtools")
library(devtools)
install_github("satijalab/seurat")
library(Seurat)
install.packages(c('mixtools', 'ape'))
install.packages("https://cran.r-project.org/src/contrib/Archive/mixtools/mixtools_1.0.3.tar.gz")
install.packages("https://cran.r-project.org/src/contrib/Archive/mixtools/mixtools_1.0.2.tar.gz")
install.packages("D:/projects/Peng Gao/20160414/mixtools_1.0.4.tar.gz")
install.packages("D:/projects/Peng Gao/20160414/mixtools_1.0.2.tar.gz")
install.packages("D:/projects/Peng Gao/20160414/mixtools_1.0.0.tar.gz")
install_github("satijalab/seurat")
library(mixtools)
load("D:/InteClinGenomics/my.RData")
shiny::runApp('D:/InteClinGenomics')
load("D:/InteClinGenomics/my.RData")
shiny::runApp('D:/InteClinGenomics')
load("D:/InteClinGenomics/my.RData")
shiny::runApp('D:/InteClinGenomics')
?order
order(c(1,2,1,1,2,2,1))
order(c(1,2,1,1,2,2,1))
order(c(1,2,1,1,2,2,1))
order(c(1,2,1,1,2,2,1))
order(c(1,1,2,1,2,2,1))
order(c(1,1,2,1,2,2,1))
load("D:/projects/Peng Gao/20160328/all_UID.RData")
head(sample_info)
dim(gene_exp)
shiny::runApp('D:/projects/Endometrial carcinoma/20160412/TCGA data/UCEC-US/InteClinGenomics')
shiny::runApp('D:/projects/Endometrial carcinoma/20160412/TCGA data/UCEC-US/InteClinGenomics')
shiny::runApp('D:/projects/Endometrial carcinoma/20160412/TCGA data/UCEC-US/InteClinGenomics')
shiny::runApp('D:/projects/Endometrial carcinoma/20160412/TCGA data/UCEC-US/InteClinGenomics')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
load("C:/projects/iGenomicsR_BRCA/kun_20170212.RData")
names(DB)
write.csv(DB[["Mutation_gene"]], file="C:/projects/iGenomicsR_BRCA/test_data/mutation.csv")
shiny::runApp()
runApp()
runApp()
runApp()
names(DB)
DB[["Clinical"]][1:3,1:3]
runApp()
